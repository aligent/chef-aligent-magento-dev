#!/usr/bin/env bash
#
# EBS Volume Snapshot Script
#
# This is a stand alone all-in-one script to create and prune snapshots for the ebs volume attached to ebs4
# (/dev/sdf|/dev/xvdf) on the instance it is run on.
#
# Most of the variables are created on the fly with each running of the script. This ensures that even in the event of
# a live volume swap the script is smart enough to Just Workâ„¢. An EBS snapshot is, by default, restricted to only being
# accessible by its creator; they are also region local.
#
# NOTE: Of the KEEP_ variables below only 'daily' is set for now. These variables can be set at any time, but are only
# set in this file.
#
# NOTE: To debug this script simply "export DEBUG=true" in your shell session before invoking this script, it will
# set bash to debug mode which will output to your terminal window. This output can not be captured or redirected.


# Backup Pruning Variables
#
# ec2-expire-snapshots intelligently manages the snapshots of volume to maintain the child, parent, grand-parent
# backup scheme.
#
# NOTE: These must only ever be integers or null!!
#
KEEP_DAILY=7
KEEP_WEEKLY=
KEEP_MONTHLY=

LOG="/var/log/$(basename $0).log"

# x | xtrace  = Print command traces before executing command.
# e | errexit = Exit immediately if a pipeline or command exits with a non-zero status.
# u | nounset = No unset variables.
[[ ${DEBUG} ]] && set -x
set -eu


# Functions
#
log () {
    local message="$@"
    [[ ! -f ${LOG} ]] && touch ${LOG} && chmod 600 ${LOG}
    echo "$(date --iso-8601=seconds) ${message}" >> ${LOG}
    echo "${message}" &>2
}

aws_curl () {
    curl -s http://169.254.169.254/latest/meta-data/$1
}


# Dynamic Variables
#
INSTANCE_ID="$(aws_curl instance-id)"
EBS_DEV="$(aws_curl block-device-mapping/ebs4)"
AVAILABILITY_ZONE="$(aws_curl placement/availability-zone)"
REGION=${AVAILABILITY_ZONE%?}

VOLUME_COMMAND="aws ec2 describe-volumes \
    --region ${REGION} \
    --filters \
        'Name=attachment.instance-id,Values=${INSTANCE_ID}' \
        'Name=attachment.device,Values=${EBS_DEV}' \
    --query "Volumes[].VolumeId" \
    --output text"
VOLUME_ID="$(${VOLUME_COMMAND})"

STACK_COMMAND="aws ec2 describe-instances \
    --region ${REGION} \
    --instance-id ${INSTANCE_ID} \
    --query 'Reservations[].Instances[].[Tags[?Key=='ah_stage']]' \
    --output text \
    | awk '{print \$2}'"
STACK="$(${STACK_COMMAND})"

# Test and log variables
#
[[ ! ${VOLUME_ID-} =~ ^vol-[0-9a-f]{8,17}$ ]] \
    && log "ERROR: Failed to set VOLUME_ID '${VOLUME_ID}'" \
    && log "COMMAND: ${VOLUME_COMMAND}" \
    && exit 1

[[ -z ${STACK-} ]] \
    && log "ERROR: STACK tag is unset." \
    && log "COMMAND: ${STACK_COMMAND}" \
    && exit 1

log "INFO: INSTANCE_ID=${INSTANCE_ID}"
log "INFO: EBS_DEV=${EBS_DEV}"
log "INFO: REGION=${REGION}"
log "INFO: VOLUME_ID=${VOLUME_ID}"
log "INFO: STACK=${STACK}"


# Create an EBS volume snapshot
#
log "INFO: Creating snapshot for volume: '${VOLUME_ID}'"
ec2-consistent-snapshot \
    --region ${REGION} \
    --use-iam-role \
    --tag "SNAPSHOT_TYPE=ec2-consistent-snapshot;STACK=${STACK}" \
    --freeze-filesystem /nfs \
    ${VOLUME_ID} \
    | tee -a ${LOG}


# Prune obsolete snapshots
#
log "INFO: Pruning snapshots of volume: '${VOLUME_ID}'"
ec2-expire-snapshots \
    --region ${REGION} \
    --use-iam-role \
    $([[ ${KEEP_DAILY-} ]] && echo "--keep-first-daily ${KEEP_DAILY}") \
    $([[ ${KEEP_WEEKLY-} ]] && echo "--keep-first-weekly ${KEEP_WEEKLY}") \
    $([[ ${KEEP_MONTHLY-} ]] && echo "--keep-first-monthly ${KEEP_MONTHLY}") \
    ${VOLUME_ID} \
    | tee -a ${LOG}

log "INFO: Volume snapshot and pruning is complete. Have a nice day!"

